<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        queryBinding='xslt' schemaVersion='ISO19757-3'>

  <title>Repository eXchange Package Envelope (rxp.xml) schematron</title>
  <ns prefix="mets" uri="http://www.loc.gov/METS/" />
  <ns prefix="xlink" uri="http://www.w3.org/1999/xlink" />
  <xsl:key name="file_ids" match="//mets:fptr" use="@FILEID"/>

  <pattern>

    <title>METS elements required by the RXP</title>

    <rule context = "/mets:mets">
      <assert test="@OBJID">
        There must be an OBJID (the RXP creator's package identifier)
      </assert>
      <assert test="count(mets:metsHdr)=1">
        There must be one METS Header
      </assert>
      <assert test="count(mets:amdSec)=1">
        There must be one amdSec
      </assert>
      <assert test="not(mets:dmdSec)">
        There must not be a dmdSec
      </assert>
      <assert test="count(mets:fileSec)=1">
        There must be one fileSec
      </assert>
      <assert test="count(mets:structMap)=1">
        There must be one structMap
      </assert>
    </rule>
  </pattern>

  <pattern>

    <title>METS header content and attributes</title>

    <rule context="/mets:mets/mets:metsHdr">
      <report test="@CREATEDATE">
        The METS Header should have a CREATEDATE
      </report>
      <assert test="mets:agent">
        The METS Header must have one agent
      </assert>
    </rule>

    <rule context="/mets:mets/mets:metsHdr/mets:agent">
      <assert test="@ROLE='DISSEMINATOR'">
        The agent role must be DISSEMINATOR
      </assert>
      <assert test="@TYPE='ORGANIZATION'">
        The agent type must be ORGANIZATION
      </assert>
      <assert test="mets:name">
        The agent must have a name
      </assert>
      <assert test="mets:note = 'rxp-1.0.0'">
        The rxp version must be 1.0.0
      </assert>
    </rule>

  </pattern>

  <pattern>

    <title>The amdSec content</title>

    <rule context="mets:mets/mets:amdSec">
      <report test="mets:rightsMD">
        There should be a rightsMD section
      </report>
      <assert test="mets:digiprovMD">
        There must be a digiprovMD section
      </assert>
    </rule>

    <rule context="/mets:mets/mets:amdSec/mets:rightsMD">
      <assert test="mets:mdRef[@LOCTYPE = 'URL][@MDTYPE = 'PREMIS'][@xlink:href='rxp-rights.xml']">
        The rights section must have an mdRef of TYPE URL and MDTYPE PREMIS that references rxp-rights.xml
      </assert>
    </rule>

    <rule context="/mets:mets/mets:amdSec/mets:digiprovMD">
      <assert test="mets:mdRef[@LOCTYPE = 'URL][@MDTYPE = 'PREMIS'][@xlink:href='rxp-digiprov.xml']">
        The digiprov section must have an mdRef of TYPE URL and MDTYPE PREMIS that references rxp-digiprov.xml
      </assert>
    </rule>

  </pattern>

  <pattern>
    <title>The fileSec content</title>

    <rule context="/mets:mets/mets:fileSec">
      <assert test="count(mets:fileGrp)=2">
        There must be two file groups
      </assert>
      <assert test="mets:fileGrp[@USE='METADATA']">
        There must be one metadata file group
      </assert>
      <assert test="mets:fileGrp[not(@USE='METADATA')]">
        There must be one non-metadata file group
      </assert>
    </rule>

    <rule context="/mets:mets/mets:fileSec/mets:fileGrp[@USE='METADATA']">
      <assert test="mets:file/mets:FLocat/@xlink:href = //mets:amdSec//mets:mdRef/@xlink:href">
        files referenced in the metadata file group must be in the amdSec
      </assert>
    </rule>

    <rule context="/mets:mets/mets:fileSec/mets:fileGrp[not(@USE='METADATA')]">
      <assert test="mets:file/@ID = //mets:structMap//mets:fptr/@FILEID">
        files in the non-metadata file group must be in the structMap
      </assert>
    </rule>

    <rule context="//mets:file">
      <assert test="@CHECKSUM and @CHECKSUMTYPE='SHA-1'">
        All files in the fileSec must have sha-1 checksums
      </assert>
    </rule>

    <rule context="//mets:file/mets:FLocat">
      <assert test="not(starts-with(@xlink:href, 'files/')">
        all FLocats in the fileSec must not reference files in the files directory
      </assert>
    </rule>

  </pattern>

  <pattern>

    <title>The structMap Content</title>

    <rule context="/mets:mets/mets:structMap/mets:div">
      <assert test="mets:div">
        The struct map must have an inner div
      </assert>
      <assert test="count(mets:div[@TYPE='ACTIVE'])=1">
        There must be only one active representation (TYPE='ACTIVE')
      </assert>
    </rule>

    <rule context="/mets:mets/mets:structMap/mets:div/mets:div">
      <assert test="@ORDER and (@ORDER != sibling::@ORDER) and (@ORDER >= 1)">
        all inner divs must have an order
      </assert>
      <assert test="@ORDER != sibling::@ORDER">
        inner div orders must be distinct
      </assert>
      <assert test="@ORDER >= 1">
        inner div orders must be greater than or equal to 1
      </assert>
    </rule>

    <rule context="/mets:mets/mets:structMap/mets:div//mets:fptr">
      <assert test="@FILEID = //mets:file/@ID">
        Files referenced in the structMap must exist in the fileSec
      </assert>
    </rule>

  </pattern>


</schema>
